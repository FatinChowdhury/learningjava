/*A getList() method which takes no inputs and returns an array containing all the units
that are part of this list. The units should appear in the order in which they have joined
the list. This array must contain as many elements as the number of units in the list,
and it should not contain any null elements. */
	
	public String[] getList() {
		// incomplete
		ListOfUnits = new String[size];
		for (int i=0; i<=size; i++) {
			if (ListOfUnits[i] == null) {
				size++;
			}
		}
		
		return ListOfUnits;
	}
	
/* A getUnit() method which takes as input an int and returns the reference of the unit
at the specified position in this list. If the integer received is out of range, i.e. negative
or greater than or equal to the number of units in the list, then the method should throw
an IndexOutOfBoundsException. */
	
	public String getUnit(int i) {
		// incomplete
		if (i >=0 && i < size) {
			return ListOfUnits[i];
		}
		else {
			throw new IndexOutOfBoundsException();
		}
	}
	
	
/* An addUnit() method which takes as input a Unit and does not return any value. The
method adds the Unit at the end of this list. Make sure to handle the case in which
there might not be enough space for this unit to join the list. In such case, you need to
make sure to create additional space. No unit should be rejected from joining the list.
If need be, this is a great place to create your own private method to help you with the
implementation. Warning: make sure that no unit is removed from the list as a result of
adding the new one. */
	
	public void addUnit(String Unit) {
		// incomplete
		if (Unit == null) {
			throw new IllegalArgumentException();
		}
		
		else if (ListOfUnits.length == size) {
			fixList();
		}
			ListOfUnits[size] = Unit;
			size++;
	}
	
	// creating my own private method
	private void fixList() {
		String[] bigger = new String[ListOfUnits.length*2];
		for(int i=0; i < size; i++) {
			bigger[i] = ListOfUnits[i];
		}
		ListOfUnits = bigger; 
	}
	
/* An indexOf() method which takes as input a Unit and returns an int indicating the
position of the first occurrence of the specified element in this list. If no such unit exists,
then the method returns −1. Remember that when comparing reference types you do
not want to use ‘==’. */
	
	public int indexOf(String Unit) {
		// incomplete
		if (size == 0)
			throw new IllegalArgumentException();
		for (int position = 0; position < size; position++) { 
			if (ListOfUnits[position] == null) {
				throw new NullPointerException();
			}
			else if (ListOfUnits[position].equals(Unit)) { // i love ed discussions lol
				return position;
			}
		}
		return -1;
	}
